/* @dev Setup the basic box sizing. before and after 
 *
 */
*, *::after, *::before {
	box-sizing: border-box;
}

/*--------------------------------------------------------------*/

/* globally declaring variable to size all the cells.
 * sizing the ticks -- Cross / circle inside the cells.
 */
:root {
	--cell-size: 100px;
	--mark-size: calc(var(--cell-size) * .9);
}

/*---------------------------------------------------------------*/

/* @dev removing marging of body . */
body {
	margin: 0;
	justify-content: center;
}

.box {
	background-color: lavenderblush;
	padding: 50px;
	position: relative;
	margin: 100px, 100px, 0, 100px;
	text-align: center;
	font-size: 2em;
}


/*---------------------------------------------------------------*/

/* @dev giving background to tic tac toe board. 
 * size of the board.
 * display grid to layout the elements inside board.
 * justifying content to center - (x - axis)
 * aligning content to center - (y - axis)
 * creating grid columns. / all autosized.
 * justify / align items into center.
 */
.board {
	width: 100vw;
	height: 100vh;
	display: grid;
	justify-content: center;
	align-content: center;
	justify-items: center;
	align-items: center;
	grid-template-columns: repeat(3, auto);
}

/*----------------------------------------------------------------*/


/* @dev sizing the cells inside the tic tac board.
 * to make sizing of the cells automatic -  use css variables.
 * adding the border to the cells inside the board.
 * content to center - x - axis.
 * 
 */
.cell {
	width: var(--cell-size);
	height: var(--cell-size);	
	border: 1px solid black;
	display: flex;
	justify-content: center;
	align-items: center;
	position: relative;
	cursor: pointer;
}


/*---------------------------------------------------------------*/

/* @dev removing unwanted borders from top in the board. */
.cell:first-child,
.cell:nth-child(2),
.cell:nth-child(3) {
	border-top: none;
}

/* @dev removing unwanted borders from side left/right in the board. */
.cell:nth-child(3n + 1) {
	border-left: none;

}

.cell:nth-child(3n + 3) {
	border-right: none;
	
}


/* @dev removing unwanted borders from bottom in the board. */
.cell:last-child,
.cell:nth-child(7),
.cell:nth-child(8) {
	border-bottom: none;
}


/* ----------------------------------------------------------------*/

/* @dev detecting if the box is filled or not. 
 * selecting both cross / circle abandone the fill when present.
 */
 .cell.cross,
 .cell.circle {
 cursor: not-allowed;
}


.cell.cross::before,
.cell.cross::after,
.cell.circle::before {
	background-color: black;

}


/* @dev creating the hover effect.
 * 
 */
.board.cross .cell:not(.cross):not(.circle):hover::before,
.board.cross .cell:not(.cross):not(.circle):hover::after,
.board.circle .cell:not(.cross):not(.circle):hover::before {
	background-color: lightgrey;

}


/* @dev creating the cross/circle mark in the cells. 
 * creating a cross mark using pseudo elements.
 * adding content empty , width to global variable --mark-size.
 */
.cell.cross::before,
.cell.cross::after,
.board.cross .cell:not(.cross):not(.circle):hover::before,
.board.cross .cell:not(.cross):not(.circle):hover::after {
	content: "";
	position: absolute;
	width: calc(var(--mark-size) * 0.15);
	height: var(--mark-size);
}

/* @dev setting/displaying up the cross sign on board with css.
 * using pseudo emenets.
 */
.cell.cross::before,
.board.cross .cell:not(.cross):not(.circle):hover::before {
	transform: rotate(45deg);
}

.cell.cross::after,
.board.cross .cell:not(.cross):not(.circle):hover::after  {
 	transform: rotate(-45deg);
}

 /*----------------------------------------*/

.cell.circle::before,
.cell.circle::after,
.board.circle .cell:not(.cross):not(.circle):hover::before, 
.board.circle .cell:not(.cross):not(.circle):hover::after {
	content: "";
	position: absolute;
	border-radius: 50%;

}

.cell.circle::before,
.board.circle .cell:not(.cross):not(.circle):hover::before {
	width: var(--mark-size);
	height: var(--mark-size);
}

.cell.circle::after,
.board.circle .cell:not(.cross):not(.circle):hover::after {
	width: calc(var(--mark-size) * 0.7);
	height: calc(var(--mark-size) * 0.7);;
	background-color: white;
}


/* 
 * @dev creating the Restart button.
 */
 .winning-message {
 	display: none;
 	position: fixed;
 	top: 0;
 	right: 0;
 	bottom: 0;
 	left: 0;
 	background-color: rgba(0, 0, 0, 0.9);
 	justify-content: center;
 	align-items: center;
 	color: white;
 	font-size: 5rem;
 	flex-direction: column;
 }

 .winning-message button {
 	font-size: 3rem;
 	background-color: white;
 	border: 1px solid black;
 	border-radius: 50px;
 	padding: .25em .5em;
 	margin: 1.5em;
 	cursor: pointer;
}

.winning-message button:hover {
	background-color: black;
	color: white;
	border-color: white;
}


.winning-message.show {
	display: flex;
}
